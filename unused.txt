SMODS.Joker{
    key = "unnammed",
    atlas = "othercards",
    pos = {x=1, y=0},
    rarity = 3,
    blueprint_compat = false,
    cost = 8,
    config = {extra={}},
    loc_vars = function(self,info_queue,card)
        return {vars={}}
    end
}
G.FUNCS.reroll_shop = function(e)
    stop_use()
    G.CONTROLLER.locks.shop_reroll = true
    if G.CONTROLLER:save_cardarea_focus("shop_jokers") then G.CONTROLLER.interrupt.focus = true end
    if G.GAME.current_round.reroll_cost > 0 then 
    inc_career_stat("c_shop_dollars_spent", G.GAME.current_round.reroll_cost)
    inc_career_stat("c_shop_rerolls", 1)
    ease_dollars(-G.GAME.current_round.reroll_cost)
    end
    G.E_MANAGER:add_event(Event({
        trigger = "immediate",
        func = function()
        local final_free = G.GAME.current_round.free_rerolls > 0
        G.GAME.current_round.free_rerolls = math.max(G.GAME.current_round.free_rerolls - 1, 0)
        G.GAME.round_scores.times_rerolled.amt = G.GAME.round_scores.times_rerolled.amt + 1

        calculate_reroll_cost(final_free)
        for i = #G.shop_jokers.cards,1, -1 do
            local c = G.shop_jokers:remove_card(G.shop_jokers.cards[i])
            c:remove()
            c = nil
        end
        if next(SMODS.find_card("j_bhc_roadworks")) then
            for i = #G.shop_booster.cards,1, -1 do
            local c = G.shop_booster:remove_card(G.shop_booster.cards[i])
            c:remove()
            c = nil
            end
        end

        --save_run()

        play_sound("coin2")
        play_sound("other1")

        for i = 1, G.GAME.shop.joker_max - #G.shop_jokers.cards do
            local new_shop_card = create_card_for_shop(G.shop_jokers)
            G.shop_jokers:emplace(new_shop_card)
            new_shop_card:juice_up()
        end
        if next(SMODS.find_card("j_bhc_roadworks")) then
            G.GAME.current_round.used_packs = {}
            for i = 1, 2 do
            if not G.GAME.current_round.used_packs[i] then
                G.GAME.current_round.used_packs[i] = get_pack("shop_pack").key
            end
            local new_booster_card = Card(G.shop_booster.T.x + G.shop_booster.T.w/2,
            G.shop_booster.T.y, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS[G.GAME.current_round.used_packs[i]], {bypass_discovery_center = true, bypass_discovery_ui = true})
            create_shop_card_ui(new_booster_card, "Booster", G.shop_booster)
            new_booster_card.ability.booster_pos = i
            new_booster_card:start_materialize()
            G.shop_booster:emplace(new_booster_card)
            end
        end
        return true
        end
    }))
    G.E_MANAGER:add_event(Event({
        trigger = "after",
        delay = 0.3,
        func = function()
        G.E_MANAGER:add_event(Event({
        func = function()
            G.CONTROLLER.interrupt.focus = false
            G.CONTROLLER.locks.shop_reroll = false
            G.CONTROLLER:recall_cardarea_focus("shop_jokers")
            for i = 1, #G.jokers.cards do
            G.jokers.cards[i]:calculate_joker({reroll_shop = true})
            end
            return true
        end
        }))
        return true
    end
    }))
    G.E_MANAGER:add_event(Event({ func = function() save_run(); return true end}))
end

SMODS.Joker{
    key = "oldotherdanger",
    atlas = "jokers",
    pos = {x=9, y=0},
    pixel_size = {h=63},
    rarity = 3,
    blueprint_compat = true,
    cost = 8,
    config = {extra={repetitions=0}},
    loc_vars = function(self,info_queue,card)
        return {vars={card.ability.extra.repetitions}}
    end,
    update = function(self,card)
        card.ability.extra.repetitions = 0
        for _,area in ipairs(SMODS.get_card_areas("jokers")) do
            for _,_card in ipairs(area.cards) do
                if _card ~= card and string.find(_card.ability.name, "j_bhc") then
                    card.ability.extra.repetitions = card.ability.extra.repetitions + 1
                end
            end
        end
    end,
    calculate = function(self,card,context)
        if context.repetition and context.cardarea == G.play then
            return {repetitions=card.ability.extra.repetitions}
        end
    end
}

SMODS.Joker{
    key = "blanksign",
    atlas = "jokers",
    pos = {x=8, y=2},
    soul_pos = {x=9,y=2},
    rarity = 4,
    blueprint_compat = false,
    cost = 20,
    config = {extra={total=10,current=0}},
    loc_vars = function(self,info_queue,card)
        return {vars={card.ability.extra.total,card.ability.extra.current}}
    end,
    calculate = function(self,card,context)
        if context.selling_card and (context.card ~= card) and not context.blueprint then
            if string.find(context.card.ability.name, "j_bhc") then
                card.ability.extra.current = card.ability.extra.current + 1
                if card.ability.extra.current == card.ability.extra.total then
                    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
                        if area.cards then
                            for _, v in pairs(area.cards) do
                                if string.find(v.ability.name, "j_bhc") and (v.ability.name ~= "j_bhc_blanksign") and v.ability.extra then
                                    for i, d in pairs(v.ability.extra) do
                                        if type(d) == "number" then
                                            -- don't do d = d * 2 as that would break Xmult mod values
                                            v.ability.extra[i] = d + d
                                        end
                                    end
                                end
                            end
                        end
                    end
                    card.ability.extra.current = 0
                    return {message="Doubled!", colour=G.C.DARK_EDITION}
                end
                return {message=(card.ability.extra.current.."/"..card.ability.extra.total), colour=G.C.FILTER}
            end
        end
    end,
}